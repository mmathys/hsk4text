{"version":3,"sources":["Text.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["shouldUsePrefix","lines","map","l","split","length","reduce","p","n","Text","props","useState","text","setText","splitFirst","x","arr","slice","c","useEffect","a","key","getKey","config","fetch","res","prefixed","unprefixed","fetchText","className","row","lesson","App","setConfig","activeText","setActiveText","selectedLesson","setSelectedLesson","audioRef","useRef","json","fetchData","selectLesson","lesson_num","subitems","entries","entryClassName","entry","onClick","current","load","grouped","_","groupBy","texts","keys","parseInt","nav","title","controls","ref","src","type","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAQMA,EAAkB,SAACC,GAOvB,OANkBA,EAAMC,KAAI,SAACC,GAE3B,OADYA,EAAEC,MAAM,UACZ,GAAGC,QAAU,KAINC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKC,MAGlC,SAASC,EAAKC,GAAmB,IAAD,EACbC,qBADa,mBAC9BC,EAD8B,KACxBC,EADwB,KAG/BC,EAAa,SAACC,GAClB,IAAMC,EAAMD,EAAEX,MAAM,UACpB,OAAmB,IAAfY,EAAIX,OAAqB,CAAC,GAAIW,EAAI,IAI7B,CAFQA,EAAI,GAAK,SACXA,EAAIC,MAAM,GAAGX,QAAO,SAACC,EAAGW,GAAJ,OAAUX,EAAI,SAAMW,OAuBzD,OAlBAC,qBAAU,YACO,uCAAG,sCAAAC,EAAA,6DACVC,EAAMC,EAAOZ,EAAMa,QADT,SAEEC,MAAM,QAAD,OAASH,EAAT,SAFP,cAEVI,EAFU,gBAGGA,EAAIb,OAHP,OAGVA,EAHU,OAIVX,EAAQW,EAAKR,MAAM,MACrBJ,EAAgBC,IACZyB,EAAWzB,EAAMC,IAAIY,GAC3BD,EAAQa,KAEFC,EAAa1B,EAAMC,KAAI,SAACC,GAAD,MAAO,CAAC,GAAIA,MACzCU,EAAQc,IAVM,2CAAH,qDAcfC,KACC,CAAClB,IAGF,8BACE,qBAAKmB,UAAU,QAAf,gBACGjB,QADH,IACGA,OADH,EACGA,EAAMV,KAAI,SAAC4B,GACV,OACE,sBAAKD,UAAU,MAAf,UACE,mBAAGA,UAAU,mBAAb,SAAiCC,EAAI,KACrC,mBAAGD,UAAU,OAAb,SAAqBC,EAAI,e,oBCvChC,SAASR,EAAOC,GACrB,GAAKA,EACL,OAAQA,EAAOQ,OAAS,GAAK,IAAM,IAAMR,EAAOQ,OAAS,IAAMR,EAAOX,KA4FzDoB,MAzFf,WAAgB,IAAD,EACerB,qBADf,mBACNY,EADM,KACEU,EADF,OAEuBtB,qBAFvB,mBAENuB,EAFM,KAEMC,EAFN,OAG+BxB,oBAAkB,GAHjD,mBAGNyB,EAHM,KAGUC,EAHV,KAIPC,EAAWC,iBAAyB,MA2E1C,OAzEApB,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACEI,MAAM,eADR,cACVC,EADU,gBAEWA,EAAIe,OAFf,OAEVA,EAFU,OAGhBP,EAAUO,GAHM,2CAAH,qDAMfC,KACC,IAkED,qBAAKZ,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,MAAf,SA3DM,WACV,GAAKN,EAAL,CAEA,IAAMmB,EAAe,SAACC,GAAD,OAAwB,WAEzCN,EADEM,IAAeP,GACE,EAEDO,KAIhBC,EAAW,SAACC,EAAuBF,GACvC,GAAIA,IAAeP,EAAnB,CACA,IAAMU,EAAiB,SAACC,GAAD,MAAuB,aAAeA,IAAUb,EAAa,UAAY,KAChG,OAAOW,EAAQ3C,KAAI,SAAC6C,GAAD,OACjB,sBAAKlB,UAAWiB,EAAeC,GAA4BC,QAAS,kBAtB1D,SAACD,GACfZ,EAAcY,GACVT,EAASW,SACXX,EAASW,QAAQC,OAmB2DrC,CAAQkC,IAAlF,kBACQA,EAAMnC,OAD8BU,EAAOyB,SAMjDI,EAAUC,IAAEC,QAAQ9B,EAAO+B,OAAO,SAACpC,GAAD,OAAmBA,EAAEa,UAE7D,OADaqB,IAAEG,KAAKJ,GACRjD,KAAI,SAAC6B,GACf,IAAMY,EAAaa,SAASzB,GACtBc,EAAUM,EAAQpB,GAClBF,EAAY,cAAgBc,KAAU,OAAKT,QAAL,IAAKA,OAAL,EAAKA,EAAYH,QAAS,UAAY,IAClF,OACE,gCACE,oBAAGF,UAAWA,EAAWmB,QAASN,EAAaC,GAA/C,oBACUZ,KAETa,EAASC,EAASF,UA2BCc,KArBZ,WACd,GAAKvB,EAAL,CAKA,OACE,sBAAKL,UAAU,eAAf,UAJKK,EAAWwB,MACJ,mBAAG7B,UAAU,QAAb,SAAsBK,EAAWwB,aADtB,EAMrB,cAAC,EAAD,CAAMnC,OAAQW,IACd,wBAAOL,UAAU,QAAQ8B,UAAQ,EAACC,IAAKtB,EAAvC,UACE,wBAAQuB,IAAG,gBAAWvC,EAAOY,GAAlB,QAAqC4B,KAAK,eADvD,0DAYCC,SC3FMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.833f7a01.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getKey, TextConfig } from \"./App\";\nimport \"./Text.css\";\n\ntype TextProps = {\n  config: TextConfig;\n};\n\nconst shouldUsePrefix = (lines: string[]) => {\n  const validLine = lines.map((l) => {\n    const arr = l.split(\"：\");\n    if (arr[0].length <= 4) return true;\n    else return false;\n  });\n\n  return validLine.reduce((p, n) => p && n);\n};\n\nexport function Text(props: TextProps) {\n  const [text, setText] = useState<string[][]>();\n\n  const splitFirst = (x: string) => {\n    const arr = x.split(\"：\");\n    if (arr.length === 1) return [\"\", arr[0]];\n    else {\n      const prefix = arr[0] + \"：\";\n      const rest = arr.slice(1).reduce((p, c) => p + \"：\" + c);\n      return [prefix, rest];\n    }\n  };\n\n  useEffect(() => {\n    const fetchText = async () => {\n      const key = getKey(props.config);\n      const res = await fetch(`text/${key}.txt`);\n      const text = await res.text();\n      const lines = text.split(\"\\n\");\n      if (shouldUsePrefix(lines)) {\n        const prefixed = lines.map(splitFirst);\n        setText(prefixed);\n      } else {\n        const unprefixed = lines.map((l) => [\"\", l]);\n        setText(unprefixed);\n      }\n    };\n\n    fetchText();\n  }, [props]);\n\n  return (\n    <div>\n      <div className=\"table\">\n        {text?.map((row) => {\n          return (\n            <div className=\"row\">\n              <p className=\"cell dialog-head\">{row[0]}</p>\n              <p className=\"cell\">{row[1]}</p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport { Text } from \"./Text\"\nimport { title } from \"process\"\nimport _ from \"lodash\"\n\nexport type TextConfig = {\n  lesson: number\n  text: number\n  title: string | undefined\n}\n\ntype Config = {\n  texts: [TextConfig]\n}\n\nexport function getKey(config: TextConfig | undefined) {\n  if (!config) return\n  return (config.lesson < 10 ? \"0\" : \"\") + config.lesson + \"-\" + config.text\n}\n\nfunction App() {\n  const [config, setConfig] = useState<Config>()\n  const [activeText, setActiveText] = useState<TextConfig>()\n  const [selectedLesson, setSelectedLesson] = useState<number>(-1)\n  const audioRef = useRef<HTMLAudioElement>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(\"config.json\")\n      const json: Config = await res.json()\n      setConfig(json)\n    }\n\n    fetchData()\n  }, [])\n\n  const setText = (entry: TextConfig) => {\n    setActiveText(entry)\n    if (audioRef.current) {\n      audioRef.current.load()\n    }\n  }\n\n  const nav = () => {\n    if (!config) return\n\n    const selectLesson = (lesson_num: number) => () => {\n      if (lesson_num === selectedLesson) {\n        setSelectedLesson(-1)\n      } else {\n        setSelectedLesson(lesson_num)\n      }\n    }\n\n    const subitems = (entries: TextConfig[], lesson_num: number) => {\n      if (lesson_num !== selectedLesson) return\n      const entryClassName = (entry: TextConfig) => \"nav-entry\" + (entry === activeText ? \" active\" : \"\")\n      return entries.map((entry) => (\n        <div className={entryClassName(entry)} key={getKey(entry)} onClick={() => setText(entry)}>\n          Text {entry.text}\n        </div>\n      ))\n    }\n\n    const grouped = _.groupBy(config.texts, (c: TextConfig) => c.lesson)\n    const keys = _.keys(grouped)\n    return keys.map((lesson: string) => {\n      const lesson_num = parseInt(lesson)\n      const entries = grouped[lesson]\n      const className = \"nav-lesson\" + (lesson_num === activeText?.lesson ? \" active\" : \"\")\n      return (\n        <div>\n          <p className={className} onClick={selectLesson(lesson_num)}>\n            Lesson {lesson}\n          </p>\n          {subitems(entries, lesson_num)}\n        </div>\n      )\n    })\n  }\n\n  const content = () => {\n    if (!activeText) return\n    const title = () => {\n      if (!activeText.title) return\n      else return <p className=\"title\">{activeText.title}</p>\n    }\n    return (\n      <div className=\"text chinese\">\n        {title()}\n        <Text config={activeText}></Text>\n        <audio className=\"audio\" controls ref={audioRef}>\n          <source src={`audio/${getKey(activeText)}.mp3`} type=\"audio/mpeg\" />\n          Your browser does not support the audio element.\n        </audio>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <div className=\"nav\">{nav()}</div>\n        {content()}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}